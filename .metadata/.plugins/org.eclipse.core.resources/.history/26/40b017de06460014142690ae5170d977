
public class EnoughAmountState implements State {
	
	GumballMachine gumballMachine;
	
	public EnoughAmountState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
	
	 public void insertQuarter()
	    {
		 gumballMachine.amount+=25;
	    	System.out.println("You can not insert Quarter now ... Gumball Machine is in soldOut state.");
	    }
		public void insertDime()
		{
			gumballMachine.amount+=10;
			System.out.println("You can not insert Dime now ... Gumball Machine is in soldOut state.");
		}
		public void insertNickel()
		{
			gumballMachine.amount+=5;
			System.out.println("You can not insert Nikel now ... Gumball Machine is in soldOut state.");
		}
		public void turnCrank()
		{
			System.out.println("You turned the crank...");

			 this.gumballMachine.amount -= 50;

			 this.gumballMachine.count--;

			 this.gumballMachine.totalGumballsInSlot++;

			 this.gumballMachine.anyGumballInSlot = true;

			 System.out.println("Please collect your Gumball(s): "+ this.gumballMachine.gumballsInSlot 

			+" and remaining change: " + this.gumballMachine.balance );

			 this.gumballMachine.balance=0;
			if(gumballMachine.amount > 50)
			{
				
			}
			System.out.println("You can not turn crank now ... Gumball Machine is in soldOut state.");
		}
		public void dispense()
		{
			System.out.println("No gumball to dispense.");
		}
		public void ejectCoins()
		{
			System.out.println("No coins to eject.");
		}
		
		public String toString()
		{
			return "sold out";
		}
  
	/*public void insertQuarter() {
		System.out.println("You can't insert another quarter");
	}
 
	public void ejectQuarter() {
		System.out.println("Quarter returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
 
	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}

    public void dispense() {
        System.out.println("No gumball dispensed");
    }
 
	public String toString() {
		return "waiting for turn of crank";
	}
*/

}
